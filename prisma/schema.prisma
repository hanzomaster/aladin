generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

// generator erd {
//     provider = "prisma-erd-generator"
//     output   = "erd.pdf"
// }

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
    referentialIntegrity = "prisma"
}

enum Gender {
    M
    F
}

enum ClothSize {
    S
    M
    L
    XL
    XXl
}

enum ColorLine {
    WHITE
    BLACK
    GRAY
    RED
    ORANGE
    YELLOW
    GREEN
    SKY
    BLUE
    INDIGO
    VIOLET
    PURPLE
    PINK
    ROSE
}

enum OrderStatus {
    InProcess
    Shipped
    Cancelled
}

model Color {
    code           String          @id @db.Char(6)
    colorLine      ColorLine
    colorName      String          @db.VarChar(20)
    productDetails ProductDetail[]

    @@map("color")
}

model ProductInStock {
    quantity Int

    productDetail ProductDetail @relation(fields: [productDetailId], references: [id])

    size            ClothSize
    productDetailId String

    @@id([productDetailId, size])
    @@map("product_in_stock")
}

model Product {
    code          String          @id @default(cuid())
    name          String          @db.VarChar(50)
    description   String?         @db.Text
    buyPrice      Decimal         @db.Decimal(10, 2)
    productLine   String
    productDetail ProductDetail[]

    line ProductLine @relation(fields: [productLine], references: [type])

    @@map("products")
}

model ProductDetail {
    id          String @id @default(cuid())
    image       String @db.Text
    productCode String
    colorCode   String @db.Char(6)

    cartItems      CartItem[]
    color          Color            @relation(fields: [colorCode], references: [code])
    product        Product          @relation(fields: [productCode], references: [code])
    OrderDetail    OrderDetail[]
    ProductInStock ProductInStock[]

    @@map("product_details")
}

model ProductLine {
    id              String    @id @default(cuid())
    type            String    @unique @db.VarChar(50)
    gender          Gender
    textDescription String?   @db.Text
    htmlDescription String?   @db.Text
    products        Product[]

    @@map("productlines")
}

model Order {
    orderNumber    String      @id @default(cuid())
    orderDate      DateTime
    requiredDate   DateTime
    shippedDate    DateTime
    status         OrderStatus
    comments       String?     @db.Text
    customerNumber String

    orderdetail OrderDetail[]
    customer    User          @relation(fields: [customerNumber], references: [id])

    @@map("orders")
}

model OrderDetail {
    orderNumber      String
    productDetailId  String
    quantityInOrderd Int
    priceEach        Decimal       @db.Decimal(10, 2)
    orderLineNumber  Int?          @db.SmallInt
    order            Order         @relation(fields: [orderNumber], references: [orderNumber])
    productDetail    ProductDetail @relation(fields: [productDetailId], references: [id])

    @@id([orderNumber, productDetailId])
    @@map("orderdetails")
}

model Cart {
    id       String     @id @default(cuid())
    cartItem CartItem[]
    userId   String     @unique
    user     User       @relation(fields: [userId], references: [id])

    @@map("cart")
}

model CartItem {
    productDetailId String
    cartId          String
    numberOfItems   Int

    productDetail ProductDetail @relation(fields: [productDetailId], references: [id])
    cart          Cart          @relation(fields: [cartId], references: [id])

    @@id([productDetailId, cartId])
    @@map("cart_item")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    phone         String?   @db.VarChar(50)
    isAdmin       Boolean   @default(false)
    status        Boolean   @default(true)
    address       Address[]
    accounts      Account[]
    sessions      Session[]
    order         Order[]
    cart          Cart?
}

model Address {
    id         String  @id @default(cuid())
    userId     String
    address1   String  @db.VarChar(50)
    address2   String  @db.VarChar(50)
    city       String  @db.VarChar(50)
    state      String? @db.VarChar(50)
    postalCode String? @db.VarChar(15)
    country    String  @db.VarChar(50)
    user       User    @relation(fields: [userId], references: [id])

    @@map("addresses")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
