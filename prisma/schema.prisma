generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

// generator erd {
//     provider = "prisma-erd-generator"
//     output   = "erd.pdf"
// }

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model ProdcutLine {
    productLine     String    @id @db.VarChar(50)
    textDescription String?   @db.Text
    htmlDescription String?   @db.Text
    products        Product[]

    @@map("productlines")
}

enum Gender {
    M
    F
}

enum Size {
    S
    M
    L
    XL
}

model Product {
    code            String        @id @default(cuid())
    name            String        @db.VarChar(50)
    gender          Gender
    color           String
    description     String?       @db.Text
    size            Size
    image           String?       @db.Text
    quantityInStock Int           @db.SmallInt
    buyPrice        Decimal       @db.Decimal(10, 2)
    line            String
    productLine     ProdcutLine   @relation(fields: [line], references: [productLine])
    orderdetail     OrderDetail[]
    Cart            Cart?         @relation(fields: [cartId], references: [id])
    cartId          String?

    @@map("products")
}

enum Status {
    InProcess
    Shipped
    Cancelled
}

model Order {
    orderNumber    String        @id @default(cuid())
    orderDate      DateTime
    requiredDate   DateTime
    shippedDate    DateTime
    status         Status
    comments       String?       @db.Text
    customerNumber String
    customer       User          @relation(fields: [customerNumber], references: [id])
    orderdetail    OrderDetail[]

    @@map("orders")
}

model OrderDetail {
    orderNumber      String
    productCode      String
    quantityInOrderd Int
    priceEach        Decimal @db.Decimal(10, 2)
    orderLineNumber  Int     @db.SmallInt
    order            Order   @relation(fields: [orderNumber], references: [orderNumber])
    product          Product @relation(fields: [productCode], references: [code])

    @@id([orderNumber, productCode])
    @@map("orderdetails")
}

model Cart {
    id      String    @id @default(cuid())
    prodcut Product[]

    @@map("cart")
}

// model Payment {
//     userId      String
//     checkNumber String   @db.VarChar(50)
//     paymentDate DateTime
//     amount      Decimal  @db.Decimal(10, 2)
//     user        User     @relation(fields: [userId], references: [id])

//     @@id([userId, checkNumber])
//     @@map("payments")
// }

model Address {
    id         String  @id @default(cuid())
    userId     String
    address1   String  @db.VarChar(50)
    address2   String  @db.VarChar(50)
    city       String  @db.VarChar(50)
    state      String? @db.VarChar(50)
    postalCode String? @db.VarChar(15)
    country    String  @db.VarChar(50)
    user       User    @relation(fields: [userId], references: [id])

    @@map("addresses")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    phone         String?   @db.VarChar(50)
    isAdmin       Boolean   @default(false)
    address       Address[]
    accounts      Account[]
    sessions      Session[]
    order         Order[]
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
